import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import os
from datetime import datetime
from openpyxl import load_workbook

# -------------------------------------------------------
# CONFIGURAÇÕES INICIAIS e NOMES DE ARQUIVOS
# -------------------------------------------------------
ARQUIVO_CSV = 'trades.csv'
ARQUIVO_XLSX = 'trades.xlsx'

# -------------------------------------------------------
# MÓDULO 1: Funções de Cálculo de Colunas Derivadas
# -------------------------------------------------------
def calcular_colunas_derivadas(df):
    """
    Recebe um DataFrame com as colunas mínimas:
      - 'Data' (datetime)
      - 'Ativo' (str)
      - 'Contratos' (int)
      - 'Lucro_Liquido' (float)
    Gera e retorna o DataFrame com colunas adicionais:
      - SaldoAcumulado: soma cumulativa de 'Lucro_Liquido'
      - PicoAcumulado: máximo cumulativo de 'SaldoAcumulado'
      - Drawdown: ((SaldoAcumulado - PicoAcumulado) / PicoAcumulado) * 100
      - Resultado (%): (Lucro_Liquido / SaldoAnterior) * 100
    """
    df = df.copy()

    # 1) Garante tipo correto para Lucro_Liquido
    if 'Lucro_Liquido' not in df.columns:
        df['Lucro_Liquido'] = 0.0
    df['Lucro_Liquido'] = df['Lucro_Liquido'].astype(float)

    # 2) SaldoAcumulado: soma cumulativa de Lucro_Liquido
    df['SaldoAcumulado'] = df['Lucro_Liquido'].cumsum()

    # 3) PicoAcumulado: máximo cumulativo de SaldoAcumulado
    df['PicoAcumulado'] = df['SaldoAcumulado'].cummax()

    # 4) Drawdown (%) = (SaldoAcumulado - PicoAcumulado) / PicoAcumulado * 100
    df['Drawdown'] = (
        (df['SaldoAcumulado'] - df['PicoAcumulado']) /
        df['PicoAcumulado'].replace(0, np.nan)
    ) * 100
    df['Drawdown'] = df['Drawdown'].fillna(0)

    # 5) Resultado (%) = (Lucro_Liquido / SaldoAnterior) * 100
    #    "SaldoAnterior" é "SaldoAcumulado" deslocado uma linha para baixo
    df['SaldoAnterior'] = df['SaldoAcumulado'].shift(1).fillna(0)
    # Evita divisão por zero: se SaldoAnterior == 0, define Resultado = 0
    df['Resultado (%)'] = np.where(
        df['SaldoAnterior'] != 0,
        (df['Lucro_Liquido'] / df['SaldoAnterior']) * 100,
        0.0
    )

    # Remove a coluna auxiliar 'SaldoAnterior'
    df.drop(columns=['SaldoAnterior'], inplace=True)

    return df

# -------------------------------------------------------
# MÓDULO 2: Carregar / Salvar Dados e Formatar Excel
# -------------------------------------------------------
def carregar_dados():
    """
    Lê o CSV 'trades.csv', converte 'Data' para datetime e
    recria as colunas derivadas. Se o arquivo não existir,
    retorna um DataFrame vazio com as colunas base definidas.
    """
    if os.path.exists(ARQUIVO_CSV):
        df = pd.read_csv(
            ARQUIVO_CSV,
            parse_dates=['Data'],
            dayfirst=True  # interpreta 'DD/MM/YYYY'
        )
        # Garante que 'Contratos' seja int e 'Ativo' seja string
        df['Contratos'] = df['Contratos'].astype(int)
        df['Ativo'] = df['Ativo'].astype(str)
        df['Lucro_Liquido'] = df['Lucro_Liquido'].astype(float)
    else:
        # Colunas base: Data, Ativo, Contratos, Lucro_Liquido
        df = pd.DataFrame(columns=['Data', 'Ativo', 'Contratos', 'Lucro_Liquido'])

    # Recria as colunas derivadas (SaldoAcumulado, Drawdown, Resultado)
    df = calcular_colunas_derivadas(df)
    return df

def aplicar_formatacao_excel():
    """
    Abre o arquivo Excel 'trades.xlsx' e aplica formatações:
      - 'Data'          → formato 'DD/MM/YYYY'
      - 'Ativo'         → texto normal
      - 'Contratos'     → inteiro
      - 'Lucro_Liquido' → moeda 'R$ #,##0.00'
      - 'SaldoAcumulado', 'PicoAcumulado' → moeda 'R$ #,##0.00'
      - 'Drawdown'      → porcentagem '0.00%'
      - 'Resultado (%)' → porcentagem '0.00%'
    """
    if not os.path.exists(ARQUIVO_XLSX):
        return

    wb = load_workbook(ARQUIVO_XLSX)
    ws = wb.active

    # Cria um dict {nome_coluna: índice_coluna}
    col_idx = {ws.cell(row=1, column=c).value: c for c in range(1, ws.max_column + 1)}

    # 1) Formatar 'Data'
    if 'Data' in col_idx:
        for row in range(2, ws.max_row + 1):
            ws.cell(row=row, column=col_idx['Data']).number_format = 'DD/MM/YYYY'

    # 2) Formatar monetários
    for header in ['Lucro_Liquido', 'SaldoAcumulado', 'PicoAcumulado']:
        if header in col_idx:
            for row in range(2, ws.max_row + 1):
                ws.cell(row=row, column=col_idx[header]).number_format = 'R$ #,##0.00'

    # 3) Formatar 'Drawdown' e 'Resultado (%)' como porcentagem
    for header in ['Drawdown', 'Resultado (%)']:
        if header in col_idx:
            for row in range(2, ws.max_row + 1):
                ws.cell(row=row, column=col_idx[header]).number_format = '0.00%'

    wb.save(ARQUIVO_XLSX)

def salvar_dados(df):
    """
    Recebe um DataFrame (já contendo as colunas base + derivadas)
    e salva em CSV e XLSX, aplicando a formatação no Excel.
    """
    df_to_save = df.copy()
    # Recria as colunas derivadas (caso tenham sido alteradas)
    df_to_save = calcular_colunas_derivadas(df_to_save)

    # 1) Salva em CSV
    df_to_save.to_csv(ARQUIVO_CSV, index=False)
    # 2) Salva em XLSX
    df_to_save.to_excel(ARQUIVO_XLSX, index=False)
    # 3) Aplica formatação no XLSX
    aplicar_formatacao_excel()

# -------------------------------------------------------
# MÓDULO 3: Funções de Inserção de Trades
# -------------------------------------------------------
def adicionar_trade(df, data_input, ativo, contratos, lucro):
    """
    Adiciona um trade ao DataFrame. Parâmetros:
      - df          : DataFrame carregado por carregar_dados()
      - data_input  : string no formato 'DD/MM' ou 'DD/MM/AAAA'
      - ativo       : string ('WDO' ou 'WIN')
      - contratos   : int (nº de contratos da operação)
      - lucro       : float (lucro líquido, já com taxas descontadas)

    Retorna o DataFrame recarregado com colunas derivadas atualizadas.
    """
    # 1) Converte data_input para datetime
    try:
        if len(data_input.split('/')) == 2:
            # 'DD/MM' → acrescenta ano atual
            ano_atual = datetime.now().year
            data_str = f"{data_input}/{ano_atual}"
            data_dt = datetime.strptime(data_str, "%d/%m/%Y")
        else:
            # 'DD/MM/AAAA'
            data_dt = datetime.strptime(data_input, "%d/%m/%Y")
    except ValueError:
        st.error("Data inválida. Use DD/MM ou DD/MM/AAAA.")
        return df

    # 2) Cria um DataFrame temporário para o novo trade
    novo_trade_df = pd.DataFrame([{
        'Data': data_dt,
        'Ativo': ativo,
        'Contratos': int(contratos),
        'Lucro_Liquido': float(lucro)
    }])

    # 3) Extrai apenas colunas base de 'df' (caso existam)
    #    Isso evita warnings de concatenação com colunas derivadas
    if set(['Data', 'Ativo', 'Contratos', 'Lucro_Liquido']).issubset(df.columns):
        base_df = df[['Data', 'Ativo', 'Contratos', 'Lucro_Liquido']].copy()
    else:
        base_df = pd.DataFrame(columns=['Data', 'Ativo', 'Contratos', 'Lucro_Liquido'])

    # 4) Concatena o base_df com o novo_trade_df
    base_df = pd.concat([base_df, novo_trade_df], ignore_index=True)

    # 5) Salva em disco (CSV + XLSX) e recarrega colunas derivadas
    salvar_dados(base_df)
    return carregar_dados()


# -------------------------------------------------------
# MÓDULO 4: Funções Estatísticas
# -------------------------------------------------------
def calcular_indicadores(df):
    """
    Retorna um dict com os principais indicadores de performance:
      - Total de Trades
      - Taxa de Acerto (%)
      - Retorno Médio (R$)
      - Expectância (R$)
      - Profit Factor
      - Sharpe Ratio
      - Sortino Ratio

    Se não houver dados, retorna None.
    """
    if df.empty:
        return None

    lucros = df['Lucro_Liquido']
    ganhos = lucros[lucros > 0]
    perdas = lucros[lucros < 0]

    total = len(lucros)
    acertos = len(ganhos)
    erros = len(perdas)

    ret_med = lucros.mean()
    std = lucros.std() if total > 1 else 0

    expect = (
        ganhos.mean() * (acertos / total) +
        perdas.mean() * (erros / total)
    ) if total else 0

    pf = ganhos.sum() / abs(perdas.sum()) if abs(perdas.sum()) > 0 else np.nan
    sharpe = ret_med / std if std > 0 else np.nan
    sortino = ret_med / perdas.std() if perdas.std() > 0 else np.nan
    taxa = (acertos / total) * 100 if total else 0

    return {
        "Total Trades": total,
        "Taxa de Acerto (%)": taxa,
        "Retorno Médio (R$)": ret_med,
        "Expectância (R$)": expect,
        "Profit Factor": pf,
        "Sharpe Ratio": sharpe,
        "Sortino Ratio": sortino
    }


# -------------------------------------------------------
# MÓDULO 5: Funções de Plotagem
# -------------------------------------------------------
def plot_curva_patrimonio(df):
    """
    Plota a curva de patrimônio (SaldoAcumulado) com:
      - Linha de breakeven (y=0)
      - Anotação do drawdown máximo
    """
    if df.empty:
        st.warning("Não há dados para plotar curva de patrimônio.")
        return

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(df["SaldoAcumulado"], label="Saldo Acumulado")
    ax.axhline(0, color='gray', linestyle='--', label='Breakeven')

    # Anota o drawdown máximo
    max_dd = df["Drawdown"].min()
    idx_max_dd = df["Drawdown"].idxmin()
    ax.annotate(
        f"Max Drawdown: {max_dd:.2f}%",
        xy=(idx_max_dd, df.loc[idx_max_dd, "SaldoAcumulado"]),
        xytext=(idx_max_dd, df["SaldoAcumulado"].max() * 0.5),
        arrowprops=dict(facecolor='red', shrink=0.05)
    )

    ax.set_title("Curva de Patrimônio ao Longo dos Trades")
    ax.set_xlabel("Índice de Trade")
    ax.set_ylabel("R$")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

def plot_drawdown(df):
    """
    Plota a evolução de Drawdown (%) ao longo dos trades.
    """
    if df.empty:
        st.warning("Não há dados para plotar drawdown.")
        return

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(df["Drawdown"], label="Drawdown (%)", color='red')
    ax.set_title("Drawdown (%) ao Longo dos Trades")
    ax.set_xlabel("Índice de Trade")
    ax.set_ylabel("Drawdown (%)")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

def plot_histograma(df):
    """
    Plota histograma dos valores de Lucro_Liquido (ou ProfitLoss).
    """
    if df.empty:
        st.warning("Não há dados para plotar histograma.")
        return

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.hist(df["Lucro_Liquido"], bins=10, edgecolor='black')
    ax.set_title("Histograma de Retornos por Trade (P/L)")
    ax.set_xlabel("P/L (R$)")
    ax.set_ylabel("Frequência")
    ax.grid(True)
    st.pyplot(fig)

def plot_pie_ganho_por_ativo(df):
    """
    Gera um gráfico de pizza mostrando o percentual de ganho líquido por ativo.
    Considera apenas ativos com resultado positivo.
    """
    df_ativos = df.groupby("Ativo")["Lucro_Liquido"].sum()
    df_ativos = df_ativos[df_ativos > 0]  # opcional: remove ativos com prejuízo

    if df_ativos.empty:
        return None

    fig, ax = plt.subplots()
    ax.pie(df_ativos, labels=df_ativos.index, autopct='%1.1f%%', startangle=90)
    ax.set_title("Distribuição de Lucro por Ativo")
    ax.axis("equal")  # Mantém a pizza circular
    return fig

def plot_lucro_prejuizo_por_ativo(df):
    """
    Gera um gráfico de barras verticais mostrando lucro e prejuízo total por ativo.
    """
    import matplotlib.pyplot as plt

    ativos = df["Ativo"].unique()
    ativos = [a for a in ativos if a in ["WIN", "WDO"]]  # apenas WIN e WDO

    if not ativos:
        return None

    lucro = []
    prejuizo = []

    for ativo in ativos:
        df_ativo = df[df["Ativo"] == ativo]
        lucro_total = df_ativo[df_ativo["Lucro_Liquido"] > 0]["Lucro_Liquido"].sum()
        prejuizo_total = df_ativo[df_ativo["Lucro_Liquido"] < 0]["Lucro_Liquido"].sum()
        lucro.append(lucro_total)
        prejuizo.append(abs(prejuizo_total))  # valores positivos para gráfico

    x = range(len(ativos))
    largura = 0.35

    fig, ax = plt.subplots(figsize=(8, 5))
    ax.bar([i - largura/2 for i in x], lucro, width=largura, label='Lucro', color='green')
    ax.bar([i + largura/2 for i in x], prejuizo, width=largura, label='Prejuízo', color='red')

    ax.set_xticks(x)
    ax.set_xticklabels(ativos)
    ax.set_ylabel("Valor R$")
    ax.set_title("Lucro vs Prejuízo por Ativo")
    ax.legend()
    ax.grid(True, axis='y')

    return fig

# -------------------------------------------------------
# MÓDULO 6: Layout Principal do Streamlit
# -------------------------------------------------------
st.set_page_config(page_title="Painel de Controle de Trades", layout="wide")
st.title("📊 Painel de Acompanhamento de Trades")

# 1) Carrega o DataFrame (com colunas derivadas)
df = carregar_dados()

# -------------------------------------------------------
# SECTION: Sidebar para Inserção de Novo Trade
# -------------------------------------------------------
st.sidebar.header("➕ Adicionar Trade (Novo)")

# 1.1) Campo de Data (DD/MM ou DD/MM/AAAA)
data_input = st.sidebar.text_input("Data (DD/MM ou DD/MM/AAAA)", "")

# 1.2) Campo Ativo (lista suspensa)
ativo_input = st.sidebar.selectbox("Ativo", ["WDO", "WIN"])

# 1.3) Campo Quantidade de Contratos
contratos_input = st.sidebar.number_input("Contratos", min_value=1, step=1, value=1)

# 1.4) Campo Lucro Líquido (já liquido de taxas)
lucro_input = st.sidebar.text_input("Lucro Líquido (ex: 62.70)", "")

# 1.5) Botão para adicionar
if st.sidebar.button("➕ Registrar Trade"):
    # Verifica se todos os campos foram preenchidos
    if data_input.strip() and ativo_input and lucro_input.strip():
        try:
            # Converte lucro para float (aceita vírgula ou ponto)
            lucro_val = float(lucro_input.replace(",", "."))
            # Chama a função que adiciona o trade
            df = adicionar_trade(df, data_input, ativo_input, contratos_input, lucro_val)
            st.sidebar.success("✅ Trade adicionado com sucesso!")
        except ValueError:
            st.sidebar.error("❌ Valor inválido para Lucro Líquido.")
    else:
        st.sidebar.warning("Preencha todos os campos: Data, Ativo e Lucro.")


# -------------------------------------------------------
# SECTION: Sidebar de Indicadores com Explicação
# -------------------------------------------------------
with st.sidebar.expander("📈 Indicadores", expanded=False):
    indicadores = calcular_indicadores(df)
    if indicadores:
        for nome, valor in indicadores.items():
            if isinstance(valor, (int, float, np.floating)):
                st.metric(label=nome, value=f"{valor:,.2f}")
            else:
                st.metric(label=nome, value=str(valor))
        st.markdown("**ℹ️ Faixas de Desempenho de Indicadores**")
        st.markdown("""
- **Taxa de Acerto** (Percentual de trades vencedores)      
  - 🔴 Crítico: < 40%  
  - 🟠 Ruim: 40% – 49%  
  - 🟡 Moderado: 50% – 59%  
  - 🟢 Bom: 60% – 69%  
  - 🔵 Excelente: ≥ 70%

- **Retorno Médio (R$)** (Ganho ou perda média por trade)  
  - 🔴 Negativo: < 0  
  - 🟡 Leve: 0 – 1  
  - 🟢 Sólido: 1 – 2  
  - 🔵 Excelente: > 2

- **Expectância (R$)** (Lucro ou prejuízo esperado por operação)  
  - 🔴 Negativa: < 0  
  - 🟡 Neutra: 0 – 0.5  
  - 🟢 Positiva: 0.5 – 1  
  - 🔵 Excelente: > 1

- **Profit Factor** (Razão entre o total ganho e o total perdido)  
  - 🔴 Crítico: < 1  
  - 🟡 Fraco: 1 – 1.5  
  - 🟢 Bom: 1.5 – 2  
  - 🔵 Excelente: > 2

- **Sharpe Ratio** (Avalia se o retorno compensa o risco)  
  - 🔴 Inaceitável: < 0.5  
  - 🟡 Fraco: 0.5 – 1  
  - 🟢 Bom: 1 – 2  
  - 🔵 Excelente: > 2

- **Sortino Ratio** (penaliza só a volatilidade negativa)  
  - 🔴 Fraco: < 1  
  - 🟡 Médio: 1 – 1.5  
  - 🟢 Bom: 1.5 – 2  
  - 🔵 Excelente: > 2
        """)
    else:
        st.write("Sem dados para mostrar indicadores.")

# -------------------------------------------------------
# SECTION: Tabela de Histórico de Trades
# -------------------------------------------------------
st.subheader("🗂️ Histórico de Trades")

if not df.empty:
    df_exibir = df.copy()

    # 1) Formatar 'Data' como 'DD/MM/YYYY' (sem horário)
    df_exibir['Data'] = df_exibir['Data'].dt.strftime('%d/%m/%Y')

    # 2) Formatar 'Drawdown' e 'Resultado (%)' como string percentual
    df_exibir['Drawdown'] = df_exibir['Drawdown'].map(lambda x: f"{x:.2f}%")
    df_exibir['Resultado (%)'] = df_exibir['Resultado (%)'].map(lambda x: f"{x:.2f}%")

    # 3) Remover a coluna redundante 'ProfitLoss' se ela existir
    if 'ProfitLoss' in df_exibir.columns:
        df_exibir.drop(columns=['ProfitLoss'], inplace=True)

    # 4) Exibir a tabela
    st.dataframe(df_exibir, use_container_width=True)

    # 5) Descrição das colunas em um expander
    with st.expander("ℹ️ Descrição das Colunas"):
        st.markdown("""
- **Data**: Data em que o trade foi executado (formato DD/MM/AAAA).  
- **Ativo**: Instrumento negociado (ex.: WDO ou WIN).  
- **Contratos**: Quantidade de contratos negociados.  
- **Lucro_Liquido**: Valor líquido ganho ou perdido na operação (já descontadas taxas).  
- **SaldoAcumulado**: Soma cumulativa de todos os lucros líquidos até aquele trade.  
- **PicoAcumulado**: Maior valor que o SaldoAcumulado atingiu até aquele ponto.  
- **Drawdown**: Percentual de queda em relação ao PicoAcumulado (indica a maior perda até então).  
- **Resultado (%)**: (Lucro_Liquido / SaldoAnterior) × 100, onde SaldoAnterior é o SaldoAcumulado antes deste trade.  
        """)

else:
    st.write("Nenhum trade registrado ainda.")

# -------------------------------------------------------
# SECTION: Gráficos de Desempenho
# -------------------------------------------------------
st.subheader("📊 Gráficos de Desempenho")

tipo_grafico = st.radio(
    "Escolha qual gráfico exibir:",
    ("Curva de Patrimônio", "Drawdown", "Histograma", "Pizza por Ativo", "Lucro vs Prejuízo por Ativo", "Todos")
)

# Recalcula os drawdowns só se ainda não estiverem no escopo
if 'dd_events' not in globals():
    dd_events = get_drawdown_events(df)

if tipo_grafico == "Curva de Patrimônio":
    plot_curva_patrimonio(df)
elif tipo_grafico == "Drawdown":
    plot_drawdown(df)
elif tipo_grafico == "Histograma":
    plot_histograma(df)
elif tipo_grafico == "Pizza por Ativo":
    fig_pizza = plot_pie_ganho_por_ativo(df)
    if fig_pizza:
        st.pyplot(fig_pizza)
    else:
        st.info("Nenhum lucro registrado para os ativos.")
elif tipo_grafico == "Lucro vs Prejuízo por Ativo":
    fig_barras = plot_lucro_prejuizo_por_ativo(df)
    if fig_barras:
        st.pyplot(fig_barras)
    else:
        st.info("Nenhum dado disponível para WIN ou WDO.")
else:  # Exibe todos de uma vez
    plot_curva_patrimonio(df)
    plot_drawdown(df)
    plot_histograma(df)
    fig_pizza = plot_pie_ganho_por_ativo(df)
    if fig_pizza:
        st.pyplot(fig_pizza)
    fig_barras = plot_lucro_prejuizo_por_ativo(df)
    if fig_barras:
        st.pyplot(fig_barras)

# -------------------------------------------------------pipreqs
# FIM DO SCRIPT
# -------------------------------------------------------
# streamlit run app1.py
