import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from datetime import datetime
from openpyxl import load_workbook

# -------------------------------------------------------
# CONFIGURAÇÕES INICIAIS e NOMES DE ARQUIVOS
# -------------------------------------------------------
ARQUIVO_CSV = 'trades.csv'
ARQUIVO_XLSX = 'trades.xlsx'

# -------------------------------------------------------
# MÓDULO 1: Funções de Cálculo de Colunas Derivadas
# -------------------------------------------------------
def calcular_colunas_derivadas(df):
    """
    Recebe um DataFrame com as colunas mínimas:
      - 'Data' (datetime)
      - 'Ativo' (str)
      - 'Contratos' (int)
      - 'Lucro_Liquido' (float)
    Gera e retorna o DataFrame com colunas adicionais:
      - SaldoAcumulado: soma cumulativa de 'Lucro_Liquido'
      - PicoAcumulado: máximo cumulativo de 'SaldoAcumulado'
      - Drawdown: ((SaldoAcumulado - PicoAcumulado) / PicoAcumulado) * 100
      - Resultado (%): (Lucro_Liquido / SaldoAnterior) * 100
    """
    df = df.copy()

    # 1) Garante tipo correto para Lucro_Liquido
    if 'Lucro_Liquido' not in df.columns:
        df['Lucro_Liquido'] = 0.0
    df['Lucro_Liquido'] = df['Lucro_Liquido'].astype(float)

    # 2) SaldoAcumulado: soma cumulativa de Lucro_Liquido
    df['SaldoAcumulado'] = df['Lucro_Liquido'].cumsum()

    # 3) PicoAcumulado: máximo cumulativo de SaldoAcumulado
    df['PicoAcumulado'] = df['SaldoAcumulado'].cummax()

    # 4) Drawdown (%) = (SaldoAcumulado - PicoAcumulado) / PicoAcumulado * 100
    df['Drawdown'] = (
        (df['SaldoAcumulado'] - df['PicoAcumulado']) /
        df['PicoAcumulado'].replace(0, np.nan)
    ) * 100
    df['Drawdown'] = df['Drawdown'].fillna(0)

    # 5) Resultado (%) = (Lucro_Liquido / SaldoAnterior) * 100
    #    "SaldoAnterior" é "SaldoAcumulado" deslocado uma linha para baixo
    df['SaldoAnterior'] = df['SaldoAcumulado'].shift(1).fillna(0)
    # Evita divisão por zero: se SaldoAnterior == 0, define Resultado = 0
    df['Resultado (%)'] = np.where(
        df['SaldoAnterior'] != 0,
        (df['Lucro_Liquido'] / df['SaldoAnterior']) * 100,
        0.0
    )

    # Remove a coluna auxiliar 'SaldoAnterior'
    df.drop(columns=['SaldoAnterior'], inplace=True)

    return df

# -------------------------------------------------------
# MÓDULO 2: Carregar / Salvar Dados e Formatar Excel
# -------------------------------------------------------
def carregar_dados():
    """
    Lê o CSV 'trades.csv', converte 'Data' para datetime e
    recria as colunas derivadas. Se o arquivo não existir,
    retorna um DataFrame vazio com as colunas base definidas.
    """
    if os.path.exists(ARQUIVO_CSV):
        df = pd.read_csv(
            ARQUIVO_CSV,
            parse_dates=['Data'],
            dayfirst=True  # interpreta 'DD/MM/YYYY'
        )
        # Garante que 'Contratos' seja int e 'Ativo' seja string
        df['Contratos'] = df['Contratos'].astype(int)
        df['Ativo'] = df['Ativo'].astype(str)
        df['Lucro_Liquido'] = df['Lucro_Liquido'].astype(float)
    else:
        # Colunas base: Data, Ativo, Contratos, Lucro_Liquido
        df = pd.DataFrame(columns=['Data', 'Ativo', 'Contratos', 'Lucro_Liquido'])

    # Recria as colunas derivadas (SaldoAcumulado, Drawdown, Resultado)
    df = calcular_colunas_derivadas(df)
    return df

def aplicar_formatacao_excel():
    """
    Abre o arquivo Excel 'trades.xlsx' e aplica formatações:
      - 'Data'          → formato 'DD/MM/YYYY'
      - 'Ativo'         → texto normal
      - 'Contratos'     → inteiro
      - 'Lucro_Liquido' → moeda 'R$ #,##0.00'
      - 'SaldoAcumulado', 'PicoAcumulado' → moeda 'R$ #,##0.00'
      - 'Drawdown'      → porcentagem '0.00%'
      - 'Resultado (%)' → porcentagem '0.00%'
    """
    if not os.path.exists(ARQUIVO_XLSX):
        return

    wb = load_workbook(ARQUIVO_XLSX)
    ws = wb.active

    # Cria um dict {nome_coluna: índice_coluna}
    col_idx = {ws.cell(row=1, column=c).value: c for c in range(1, ws.max_column + 1)}

    # 1) Formatar 'Data'
    if 'Data' in col_idx:
        for row in range(2, ws.max_row + 1):
            ws.cell(row=row, column=col_idx['Data']).number_format = 'DD/MM/YYYY'

    # 2) Formatar monetários
    for header in ['Lucro_Liquido', 'SaldoAcumulado', 'PicoAcumulado']:
        if header in col_idx:
            for row in range(2, ws.max_row + 1):
                ws.cell(row=row, column=col_idx[header]).number_format = 'R$ #,##0.00'

    # 3) Formatar 'Drawdown' e 'Resultado (%)' como porcentagem
    for header in ['Drawdown', 'Resultado (%)']:
        if header in col_idx:
            for row in range(2, ws.max_row + 1):
                ws.cell(row=row, column=col_idx[header]).number_format = '0.00%'

    wb.save(ARQUIVO_XLSX)
